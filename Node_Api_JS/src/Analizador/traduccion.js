/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,22],$V4=[1,23],$V5=[1,20],$V6=[1,21],$V7=[1,28],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,29],$Vc=[2,7,11,19,20,36,41,42,43,44],$Vd=[1,39],$Ve=[2,7,9,11,19,20,36,41,42,43,44,52,53,54,61,62,63,64,65,66],$Vf=[1,45],$Vg=[1,44],$Vh=[1,58],$Vi=[1,54],$Vj=[1,50],$Vk=[1,53],$Vl=[1,59],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[21,25,31],$Vs=[21,25,31,73,74,75],$Vt=[1,82],$Vu=[1,81],$Vv=[1,83],$Vw=[1,84],$Vx=[21,25,31,73,74,75,77,78,79,80,81,82,83,84,85,86],$Vy=[1,90],$Vz=[1,88],$VA=[1,89],$VB=[1,96],$VC=[1,95],$VD=[1,135],$VE=[1,140],$VF=[1,134],$VG=[1,133],$VH=[1,125],$VI=[1,126],$VJ=[1,127],$VK=[1,141],$VL=[1,142],$VM=[1,136],$VN=[1,137],$VO=[1,138],$VP=[1,139],$VQ=[25,31],$VR=[21,25,31,73,74,75,77,78,79,80,81,82,83,84],$VS=[2,7,9,11,19,20,36,41,42,43,44,52,53,54,61,62,63,64,65,66,68],$VT=[2,9,11,19,20,36,41,42,43,44,52,53,54,61,62,63,64,65,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CLASES":4,"EOF":5,"CLASE":6,"rpublic":7,"TCLASS":8,"id":9,"BLOQUEC":10,"llaveder":11,"rclass":12,"rinterface":13,"llaveizq":14,"VARIASIC":15,"INSTCLASE":16,"FUNMET":17,"DECLARACION":18,"comentarioSimple":19,"comentarioMulti":20,"puntoycoma":21,"T":22,"ASIGNA":23,"DECL":24,"coma":25,"igual":26,"EXP":27,"T_FM":28,"parizq":29,"PARAMETROS":30,"parder":31,"T_IC":32,"rstatic":33,"rvoid":34,"rmain":35,"rstring":36,"corizq":37,"corder":38,"rargs":39,"BLOQUEI":40,"rint":41,"rdouble":42,"rboolean":43,"rchar":44,"ASIGNACION":45,"INSTRUCCIONES":46,"INSTRUCCION":47,"FOR":48,"WHILE":49,"DOWHILE":50,"IF_":51,"rbreak":52,"rcontinue":53,"rreturn":54,"LLAMADA":55,"AUM":56,"IMPRIMIR":57,"VALORES":58,"masmas":59,"menosmenos":60,"rprint":61,"rprintln":62,"rfor":63,"rwhile":64,"rdo":65,"rif":66,"ELSE_":67,"relse":68,"ELSE_1":69,"EXP_LOG":70,"not":71,"EXP_REL":72,"or":73,"xor":74,"and":75,"EXP_NUMERICA":76,"igualigual":77,"diferente":78,"menor":79,"mayor":80,"mayorigual":81,"menorigual":82,"menos":83,"mas":84,"por":85,"division":86,"VALOR":87,"cadena":88,"char":89,"entero":90,"double":91,"rtrue":92,"rfalse":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"rpublic",9:"id",11:"llaveder",12:"rclass",13:"rinterface",14:"llaveizq",19:"comentarioSimple",20:"comentarioMulti",21:"puntoycoma",25:"coma",26:"igual",29:"parizq",31:"parder",33:"rstatic",34:"rvoid",35:"rmain",36:"rstring",37:"corizq",38:"corder",39:"rargs",41:"rint",42:"rdouble",43:"rboolean",44:"rchar",52:"rbreak",53:"rcontinue",54:"rreturn",59:"masmas",60:"menosmenos",61:"rprint",62:"rprintln",63:"rfor",64:"rwhile",65:"rdo",66:"rif",68:"relse",71:"not",73:"or",74:"xor",75:"and",77:"igualigual",78:"diferente",79:"menor",80:"mayor",81:"mayorigual",82:"menorigual",83:"menos",84:"mas",85:"por",86:"division",88:"cadena",89:"char",90:"entero",91:"double",92:"rtrue",93:"rfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,2],[8,1],[8,1],[10,3],[10,2],[15,2],[15,1],[16,1],[16,1],[16,1],[16,1],[16,2],[18,2],[24,2],[24,1],[23,4],[23,2],[17,7],[17,6],[17,11],[17,2],[32,1],[32,1],[28,1],[28,1],[22,1],[22,1],[22,1],[22,1],[22,1],[30,4],[30,2],[45,3],[40,3],[40,2],[46,2],[46,1],[47,1],[47,1],[47,1],[47,1],[47,2],[47,2],[47,3],[47,2],[47,1],[47,2],[47,2],[47,2],[47,2],[47,1],[47,1],[47,2],[47,2],[55,4],[58,3],[58,1],[56,2],[56,2],[57,4],[57,4],[48,12],[49,5],[50,7],[51,6],[51,5],[67,2],[69,1],[69,1],[27,1],[70,2],[70,3],[70,3],[70,3],[70,1],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,1],[76,2],[76,3],[76,3],[76,3],[76,3],[76,3],[76,1],[76,1],[76,1],[76,1],[76,3],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1];return {Traduccion:this.$};
break;
case 2: case 21: case 46: case 47: case 49: case 51: case 52: case 53: case 54: case 62: case 63: case 71: case 75: case 87:
this.$=$$[$0-1]+$$[$0];
break;
case 3: case 12: case 13: case 14: case 15: case 19: case 26: case 27: case 36: case 42: case 43: case 44: case 45: case 50: case 55: case 56: case 61: case 73: case 74: case 79: case 86: case 93: case 94: case 95: case 96: case 98: case 99: case 100: case 101: case 102: case 103:
this.$=$$[$0];
break;
case 4:

        if($$[$0-2]=="interface"){
                this.$=" ";
        }else{
                this.$=$$[$0-2]+$$[$0-1]+$$[$0];
        }

break;
case 5: case 16: case 24: case 25: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 57: case 58: case 97:
this.$="";
break;
case 6:
this.$="class ";
break;
case 7:
this.$="interface";
break;
case 8: case 38:
tabs+="\t";this.$=$$[$0-2]+"\n"+$$[$0-1]+"\n"+$$[$0];
break;
case 9: case 39:
this.$=$$[$0-1]+"\n"+$$[$0];
break;
case 10: case 40:
this.$=$$[$0-1]+"\n"+tabs+$$[$0];
break;
case 11: case 41:
this.$="\n"+tabs+$$[$0];UnTabMenos();
break;
case 17:
this.$="var "+$$[$0];
break;
case 18:
this.$=$$[$0-1]+" "+$$[$0];
break;
case 20: case 59:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 22:
this.$="\nfunction "+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 23:
this.$="\nfunction "+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 35:
this.$=$$[$0-2]+""+$$[$0];
break;
case 37: case 80: case 81: case 82: case 83: case 84: case 85: case 88: case 89: case 90: case 91:
this.$=$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 48:
this.$=$$[$0-2]+" "+$$[$0-1]+$$[$0];
break;
case 60:
this.$=$$[$0-2]+$$[$0-1]+" "+$$[$0];
break;
case 64: case 65:
this.$="console.log"+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 66:

        this.$=$$[$0-11]+$$[$0-10]+"var "+$$[$0-8]+$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];

break;
case 67: case 70:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 68:
this.$=$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 69:
this.$=$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 72:
this.$=" "+$$[$0];
break;
case 76: case 77: case 78:
this.$=$$[$0-2]+" "+$$[$0-1]+" "+$$[$0];
break;
case 92:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:8,12:[1,9],13:[1,10]},{11:[1,11]},{1:[2,1]},o($V2,[2,2]),{9:[1,12]},{9:[2,6]},{9:[2,7]},o($V2,[2,5]),{10:13,14:[1,14]},o($V2,[2,4]),{2:$V3,7:$V4,11:[1,16],15:15,16:17,17:18,18:19,19:$V5,20:$V6,22:24,36:$V7,41:$V8,42:$V9,43:$Va,44:$Vb},{2:$V3,7:$V4,11:[1,30],16:31,17:18,18:19,19:$V5,20:$V6,22:24,36:$V7,41:$V8,42:$V9,43:$Va,44:$Vb},o($V2,[2,9]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),{11:[1,33],21:[1,32]},{22:37,28:34,33:[1,35],34:[1,36],36:$V7,41:$V8,42:$V9,43:$Va,44:$Vb},{9:$Vd,23:38},{9:[2,30]},{9:[2,31]},{9:[2,32]},{9:[2,33]},{9:[2,34]},o($V2,[2,8]),o($Vc,[2,10]),o($Vc,[2,16]),o($Vc,[2,25]),{9:[1,40]},{34:[1,41]},{9:[2,28]},{9:[2,29]},o($Ve,[2,17]),{21:$Vf,24:43,25:$Vg,26:[1,42]},{29:[1,46]},{35:[1,47]},{9:$Vh,27:48,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($Ve,[2,21]),{9:$Vd,23:65},o($Ve,[2,19]),{22:68,30:66,31:[1,67],36:$V7,41:$V8,42:$V9,43:$Va,44:$Vb},{29:[1,69]},{21:$Vf,24:70,25:$Vg},o($Vr,[2,74]),{9:$Vh,29:$Vi,55:56,56:55,72:71,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($Vr,[2,79],{73:[1,72],74:[1,73],75:[1,74]}),o($Vs,[2,86],{77:[1,75],78:[1,76],79:[1,77],80:[1,78],81:[1,79],82:[1,80],83:$Vt,84:$Vu,85:$Vv,86:$Vw}),{9:$Vh,29:$Vi,55:56,56:55,76:85,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{2:[1,87],9:$Vh,29:$Vi,55:56,56:55,76:86,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($Vx,[2,93]),o($Vx,[2,94]),o($Vx,[2,95]),o($Vx,[2,96],{29:$Vy,59:$Vz,60:$VA}),o($Vx,[2,98]),o($Vx,[2,99]),o($Vx,[2,100]),o($Vx,[2,101]),o($Vx,[2,102]),o($Vx,[2,103]),o($Ve,[2,18]),{25:[1,92],31:[1,91]},{14:$VB,21:$VC,32:93,40:94},{9:[1,97]},{36:[1,98]},o($Ve,[2,20]),o($Vr,[2,75]),{9:$Vh,29:$Vi,55:56,56:55,72:99,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,72:100,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,72:101,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:102,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:103,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:104,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:105,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:106,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:107,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:108,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:109,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:110,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,29:$Vi,55:56,56:55,76:111,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($Vx,[2,87]),{31:[1,112],83:$Vt,84:$Vu,85:$Vv,86:$Vw},{31:[1,113]},o($Vx,[2,62]),o($Vx,[2,63]),{9:$Vh,27:115,29:$Vi,55:56,56:55,58:114,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{14:$VB,21:$VC,32:116,40:94},{22:117,36:$V7,41:$V8,42:$V9,43:$Va,44:$Vb},o($Vc,[2,23]),o($Vc,[2,26]),o($Vc,[2,27]),{2:$VD,9:$VE,11:[1,119],18:128,19:$VF,20:$VG,22:24,36:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:129,46:118,47:120,48:121,49:122,50:123,51:124,52:$VH,53:$VI,54:$VJ,55:130,56:131,57:132,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP},o($VQ,[2,36]),{37:[1,143]},o($Vr,[2,76]),o($Vr,[2,77]),o($Vr,[2,78]),o($Vs,[2,80],{83:$Vt,84:$Vu,85:$Vv,86:$Vw}),o($Vs,[2,81],{83:$Vt,84:$Vu,85:$Vv,86:$Vw}),o($Vs,[2,82],{83:$Vt,84:$Vu,85:$Vv,86:$Vw}),o($Vs,[2,83],{83:$Vt,84:$Vu,85:$Vv,86:$Vw}),o($Vs,[2,84],{83:$Vt,84:$Vu,85:$Vv,86:$Vw}),o($Vs,[2,85],{83:$Vt,84:$Vu,85:$Vv,86:$Vw}),o($VR,[2,88],{85:$Vv,86:$Vw}),o($VR,[2,89],{85:$Vv,86:$Vw}),o($Vx,[2,90]),o($Vx,[2,91]),o($Vx,[2,92]),o($Vx,[2,97]),{25:[1,145],31:[1,144]},o($VQ,[2,61]),o($Vc,[2,22]),{9:[1,146]},{2:$VD,9:$VE,11:[1,147],18:128,19:$VF,20:$VG,22:24,36:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:129,47:148,48:121,49:122,50:123,51:124,52:$VH,53:$VI,54:$VJ,55:130,56:131,57:132,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP},o($VS,[2,39]),o($VT,[2,41]),o($VT,[2,42]),o($VT,[2,43]),o($VT,[2,44]),o($VT,[2,45]),{21:[1,149]},{21:[1,150]},{9:$Vh,21:[1,152],27:151,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($VT,[2,50]),{21:[1,153]},{21:[1,154]},{21:[1,155]},{21:[1,156]},o($VT,[2,55]),o($VT,[2,56]),{11:[1,158],21:[1,157]},{29:[1,159]},{29:[1,160]},{14:$VB,40:161},{29:[1,162]},{26:[1,163],29:$Vy,59:$Vz,60:$VA},{29:[1,164]},{29:[1,165]},{38:[1,166]},o($Vx,[2,59]),{9:$Vh,27:167,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($VQ,[2,35]),o($VS,[2,38]),o($VT,[2,40]),o($VT,[2,46]),o($VT,[2,47]),{21:[1,168]},o($VT,[2,49]),o($VT,[2,51]),o($VT,[2,52]),o($VT,[2,53]),o($VT,[2,54]),o($VT,[2,57]),o($VT,[2,58]),{22:169,36:$V7,41:$V8,42:$V9,43:$Va,44:$Vb},{9:$Vh,27:170,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{64:[1,171]},{9:$Vh,27:172,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,27:173,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,27:174,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{9:$Vh,27:175,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{39:[1,176]},o($VQ,[2,60]),o($VT,[2,48]),{9:[1,177]},{31:[1,178]},{29:[1,179]},{31:[1,180]},{21:[2,37]},{31:[1,181]},{31:[1,182]},{31:[1,183]},{26:[1,184]},{14:$VB,40:185},{9:$Vh,27:186,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},{14:$VB,40:187},{21:[2,64]},{21:[2,65]},{14:$VB,40:188},{9:$Vh,27:189,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($VT,[2,67]),{31:[1,190]},o($VT,[2,70],{67:191,68:[1,192]}),o($Vc,[2,24]),{21:[1,193]},{21:[1,194]},o($VT,[2,69]),{14:$VB,40:197,51:196,66:$VP,69:195},{9:$Vh,27:198,29:$Vi,55:56,56:55,70:49,71:$Vj,72:51,76:52,83:$Vk,87:57,88:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq},o($VT,[2,68]),o($VT,[2,71]),o($VT,[2,72]),o($VT,[2,73]),{21:[1,199]},{9:[1,201],56:200},{31:[1,202]},{59:$Vz,60:$VA},{14:$VB,40:203},o($VT,[2,66])],
defaultActions: {6:[2,1],9:[2,6],10:[2,7],25:[2,30],26:[2,31],27:[2,32],28:[2,33],29:[2,34],36:[2,28],37:[2,29],173:[2,37],181:[2,64],182:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//importaciones
        let tabs="";
        let traduccion="";
        function UnTabMenos(){
                tabs.substring(0,tabs.length-1);
        }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:return 19;					// comentario simple línea
break;
case 2:return 20;		// comentario multiple líneas
break;
case 3:return 41;
break;
case 4:return 42;
break;
case 5:return 36;
break;
case 6:return 43;
break;
case 7:return 44;
break;
case 8:return 64;
break;
case 9:return 66;
break;
case 10:return 65;
break;
case 11:return 68;
break;
case 12:return 12;
break;
case 13:return 13;
break;
case 14:return 34;
break;
case 15:return 61;
break;
case 16:return 62;
break;
case 17:return 92;
break;
case 18:return 93;
break;
case 19:return 63;
break;
case 20:return 7;
break;
case 21:return 33;
break;
case 22:return 54;
break;
case 23:return 52;
break;
case 24:return 53;
break;
case 25:return 35;
break;
case 26:return 39;
break;
case 27:return 37;  
break;
case 28:return 38;  
break;
case 29:return 14;  
break;
case 30:return 11;  
break;
case 31:return 21; 
break;
case 32:return 59;  
break;
case 33:return 60;  
break;
case 34:return 84; 
break;
case 35:return 83;
break;
case 36:return 85;
break;
case 37:return 86
break;
case 38:return 29;  
break;
case 39:return 31;  
break;
case 40:return 77;  
break;
case 41:return 78;  
break;
case 42:return 81;  
break;
case 43:return 82; 
break;
case 44:return 80;  
break;
case 45:return 79;
break;
case 46:return 26;  
break;
case 47:return 71;  
break;
case 48:return 75;  
break;
case 49:return 73;
break;
case 50:return 74;  
break;
case 51:return 'punto';  
break;
case 52:return 25;  
break;
case 53:return 88;
break;
case 54:return 91;  
break;
case 55:return 90;
break;
case 56:return 9;
break;
case 57:return 89;
break;
case 58:/*se ignoran*/ 
break;
case 59:return 5;   
break;
case 60:console.log(" ");
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\\\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:system\.out\.print\b)/i,/^(?:system\.out\.println\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9])?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([A-Za-z])[A-Za-z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:[ \t\r\n\f\b]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traduccion;
exports.Parser = traduccion.Parser;
exports.parse = function () { return traduccion.parse.apply(traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}