/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,20],$V4=[1,21],$V5=[1,26],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,27],$Va=[2,7,11,34,39,40,41,42],$Vb=[1,37],$Vc=[2,7,9,11,34,39,40,41,42,50,51,52,59,60,61,62,63,64],$Vd=[1,43],$Ve=[1,42],$Vf=[1,56],$Vg=[1,52],$Vh=[1,48],$Vi=[1,51],$Vj=[1,57],$Vk=[1,58],$Vl=[1,59],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[19,23,29],$Vq=[19,23,29,71,72,73],$Vr=[1,80],$Vs=[1,79],$Vt=[1,81],$Vu=[1,82],$Vv=[19,23,29,71,72,73,75,76,77,78,79,80,81,82,83,84],$Vw=[1,88],$Vx=[1,86],$Vy=[1,87],$Vz=[1,94],$VA=[1,93],$VB=[1,131],$VC=[1,136],$VD=[1,123],$VE=[1,124],$VF=[1,125],$VG=[1,137],$VH=[1,138],$VI=[1,132],$VJ=[1,133],$VK=[1,134],$VL=[1,135],$VM=[23,29],$VN=[19,23,29,71,72,73,75,76,77,78,79,80,81,82],$VO=[2,7,9,11,34,39,40,41,42,50,51,52,59,60,61,62,63,64,66],$VP=[2,9,11,34,39,40,41,42,50,51,52,59,60,61,62,63,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CLASES":4,"EOF":5,"CLASE":6,"rpublic":7,"TCLASS":8,"id":9,"BLOQUEC":10,"llaveder":11,"rclass":12,"rinterface":13,"llaveizq":14,"VARIASIC":15,"INSTCLASE":16,"FUNMET":17,"DECLARACION":18,"puntoycoma":19,"T":20,"ASIGNA":21,"DECL":22,"coma":23,"igual":24,"EXP":25,"T_FM":26,"parizq":27,"PARAMETROS":28,"parder":29,"T_IC":30,"rstatic":31,"rvoid":32,"rmain":33,"rstring":34,"corizq":35,"corder":36,"rargs":37,"BLOQUEI":38,"rint":39,"rdouble":40,"rboolean":41,"rchar":42,"ASIGNACION":43,"INSTRUCCIONES":44,"INSTRUCCION":45,"FOR":46,"WHILE":47,"DOWHILE":48,"IF_":49,"rbreak":50,"rcontinue":51,"rreturn":52,"LLAMADA":53,"AUM":54,"IMPRIMIR":55,"VALORES":56,"masmas":57,"menosmenos":58,"rprint":59,"rprintln":60,"rfor":61,"rwhile":62,"rdo":63,"rif":64,"ELSE_":65,"relse":66,"ELSE_1":67,"EXP_LOG":68,"not":69,"EXP_REL":70,"or":71,"xor":72,"and":73,"EXP_NUMERICA":74,"igualigual":75,"diferente":76,"menor":77,"mayor":78,"mayorigual":79,"menorigual":80,"menos":81,"mas":82,"por":83,"division":84,"VALOR":85,"cadena":86,"char":87,"entero":88,"double":89,"rtrue":90,"rfalse":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"rpublic",9:"id",11:"llaveder",12:"rclass",13:"rinterface",14:"llaveizq",19:"puntoycoma",23:"coma",24:"igual",27:"parizq",29:"parder",31:"rstatic",32:"rvoid",33:"rmain",34:"rstring",35:"corizq",36:"corder",37:"rargs",39:"rint",40:"rdouble",41:"rboolean",42:"rchar",50:"rbreak",51:"rcontinue",52:"rreturn",57:"masmas",58:"menosmenos",59:"rprint",60:"rprintln",61:"rfor",62:"rwhile",63:"rdo",64:"rif",66:"relse",69:"not",71:"or",72:"xor",73:"and",75:"igualigual",76:"diferente",77:"menor",78:"mayor",79:"mayorigual",80:"menorigual",81:"menos",82:"mas",83:"por",84:"division",86:"cadena",87:"char",88:"entero",89:"double",90:"rtrue",91:"rfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,2],[8,1],[8,1],[10,3],[10,2],[15,2],[15,1],[16,1],[16,1],[16,2],[18,2],[22,2],[22,1],[21,4],[21,2],[17,7],[17,6],[17,11],[17,2],[30,1],[30,1],[26,1],[26,1],[20,1],[20,1],[20,1],[20,1],[20,1],[28,4],[28,2],[43,3],[38,3],[38,2],[44,2],[44,1],[45,1],[45,1],[45,1],[45,1],[45,2],[45,2],[45,3],[45,2],[45,1],[45,2],[45,2],[45,2],[45,2],[45,2],[45,2],[53,4],[56,3],[56,1],[54,2],[54,2],[55,4],[55,4],[46,12],[47,5],[48,7],[49,6],[49,5],[65,2],[67,1],[67,1],[25,1],[68,2],[68,3],[68,3],[68,3],[68,1],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[70,1],[74,2],[74,3],[74,3],[74,3],[74,3],[74,3],[74,1],[74,1],[74,1],[74,1],[74,3],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new Nodo('INICIO');
                this.$.push($$[$0-1]);
                var errores=Errores; 
                Errores=[];
                return {AST:this.$,Errores:errores}; 
break;
case 2:
this.$=new Nodo('CLASES'); this.$.push($$[$0-1]);this.$.push($$[$0]);
break;
case 3:
this.$=new Nodo('CLASES'); this.$.push($$[$0]);
break;
case 4:
this.$=new Nodo('CLASE');this.$.push(new Nodo($$[$0-3]));
                this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                
break;
case 5:
Errores.push(['Error Sint치ctico',"Se encontr칩 '"+yytext+"' y se esperaba: una expresion.",this._$.first_line,this._$.first_column ]);this.$=new Nodo('CLASE');this.$.push(new Nodo("error '"+yytext+"'"));
                               console.log('Error Sintactico, se encontro ('+yytext+') y se esperaba public, int,char,string,double o boolean. En linea:'+this._$.first_line+', Columna:'+this._$.first_column);
break;
case 6:
this.$=new Nodo('TCLASS');this.$.push(new Nodo($$[$0]));
                 
break;
case 7:
this.$=new Nodo('TCLASS');this.$.push(new Nodo($$[$0]));
             
                
break;
case 8:
this.$=new Nodo('BLOQUEC');this.$.push(new Nodo($$[$0-2]));
                                        this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                                         
break;
case 9:
this.$=new Nodo('BLOQUEC');this.$.push(new Nodo($$[$0-1]));
                                this.$.push(new Nodo($$[$0]));
                                 
break;
case 10:
this.$=new Nodo('VARIASIC');this.$.push($$[$0-1]);this.$.push($$[$0]);
                                 
break;
case 11:
this.$=new Nodo('VARIASIC');this.$.push($$[$0]); 
break;
case 12:
this.$=new Nodo('INSTCLASE');this.$.push($$[$0]); 
break;
case 13:
this.$=new Nodo('INSTCLASE');this.$.push($$[$0]);
break;
case 14:
Errores.push(['Error Sint치ctico',"Se encontr칩 '"+yytext+"' y se esperaba: una expresion.",this._$.first_line,this._$.first_column]);this.$=new Nodo('INSTCLASE');this.$.push(new Nodo("error '"+yytext+"'"));
                                console.log('Error Sintactico, se encontro ('+yytext+') y se esperaba public, int,char,string,double o boolean. En linea:'+this._$.first_line+', Columna:'+this._$.first_column);
break;
case 15:
this.$=new Nodo('DECLARARION');this.$.push($$[$0-1]);this.$.push($$[$0]);
break;
case 16:
this.$=new Nodo('DECL');+this.$.push(new Nodo($$[$0-1])); this.$.push($$[$0]);
break;
case 17:
this.$=new Nodo('DECL');+this.$.push(new Nodo($$[$0]));
break;
case 18:
this.$=new Nodo('ASIGNA');this.$.push(new Nodo($$[$0-3]));this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push($$[$0]);              
break;
case 19:
this.$=new Nodo('ASIGNA');this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
break;
case 20:

                this.$=new Nodo('FUNMET'); this.$.push(new Nodo($$[$0-6]));
                this.$.push($$[$0-5]); this.$.push(new Nodo($$[$0-4]));
                this.$.push(new Nodo($$[$0-3])); 
                this.$.push($$[$0-2]); this.$.push(new Nodo($$[$0-1])); this.$.push($$[$0]);
                 
        
break;
case 21:

                this.$=new Nodo('FUNMET'); this.$.push(new Nodo($$[$0-5]));
                this.$.push($$[$0-4]); this.$.push(new Nodo($$[$0-3]));
                this.$.push(new Nodo($$[$0-2]));this.$.push(new Nodo($$[$0-1])); this.$.push($$[$0]);
                 
        
break;
case 22:

                    this.$=new Nodo('FUNMET'); this.$.push(new Nodo($$[$0-10])); this.$.push(new Nodo($$[$0-9]));
                    this.$.push(new Nodo($$[$0-8])); this.$.push(new Nodo($$[$0-7])); this.$.push(new Nodo($$[$0-6]));
                    this.$.push(new Nodo($$[$0-5]));this.$.push(new Nodo($$[$0-4])); this.$.push(new Nodo($$[$0-3]));
                    this.$.push(new Nodo($$[$0-2]));this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
            
break;
case 23:
Errores.push(['Error Sint치ctico',"Se encontr칩 '"+yytext+"' y se esperaba: una expresion.",this._$.first_line,this._$.first_column]);this.$=new Nodo('FUNMET');this.$.push(new Nodo("error '"+yytext+"'"));
                                console.log('Error Sintactico, se encontro ('+yytext+') y se esperaba public, int,char,string,double o boolean. En linea:'+this._$.first_line+', Columna:'+this._$.first_column);
break;
case 24:
this.$=new Nodo('T_IC');this.$.push($$[$0]); 
break;
case 25:
this.$=new Nodo('T_IC');this.$.push(new Nodo($$[$0]));
break;
case 26:
this.$=new Nodo('T_FM');this.$.push(new Nodo($$[$0]));
break;
case 27:
this.$=new Nodo('T_FM');this.$.push($$[$0]);
break;
case 28: case 29: case 30: case 31: case 32:
this.$=new Nodo('T');this.$.push(new Nodo($$[$0]));
break;
case 33:
this.$=new Nodo('PARAMETROS');this.$.push($$[$0-3]);
                this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                 
break;
case 34:
this.$=new Nodo('PARAMETROS');this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
break;
case 35:
this.$=new Nodo('ASIGNACION');this.$.push(new Nodo($$[$0-2]));
                this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                 
break;
case 36:
this.$=new Nodo('BLOQUEI');this.$.push(new Nodo($$[$0-2]));
                this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                 
break;
case 37:
this.$=new Nodo('BLOQUEI');this.$.push(new Nodo($$[$0-1]));this.$.push(new Nodo($$[$0]));
                 
break;
case 38:
this.$=new Nodo('INSTRUCCIONES');this.$.push($$[$0-1]);this.$.push($$[$0]);
break;
case 39:
this.$=new Nodo('INSTRUCCIONES');this.$.push($$[$0]);
break;
case 40: case 41: case 42: case 43:
this.$=new Nodo('INSTRUCCION');this.$.push($$[$0]); 
break;
case 44:
this.$=new Nodo('INSTRUCCION');this.$.push(new Nodo($$[$0-1]));this.$.push(new Nodo($$[$0]));                                 
break;
case 45: case 47:
this.$=new Nodo('INSTRUCCION');this.$.push(new Nodo($$[$0-1]));this.$.push(new Nodo($$[$0]));
                                         
break;
case 46:
this.$=new Nodo('INSTRUCCION');this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                                         
break;
case 48:
this.$=new Nodo('INSTRUCCION');this.$.push($$[$0]);
break;
case 49: case 50: case 51: case 52:
this.$=new Nodo('INSTRUCCION');this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                                         
break;
case 53: case 54:
Errores.push(['Error Sint치ctico',"Se encontr칩 '"+yytext+"' y se esperaba: una expresion.",this._$.first_line,this._$.first_column]);this.$=new Nodo('INSTRUCCION');this.$.push(new Nodo("error '"+yytext+"'"));
                                        console.log('Error Sintactico, se encontro ('+yytext+') y se esperaba public, int,char,string,double o boolean. En linea:'+this._$.first_line+', Columna:'+this._$.first_column);
break;
case 55:

        this.$=new Nodo('LLAMADA');this.$.push(new Nodo($$[$0-3]));this.$.push(new Nodo($$[$0-2]));
        this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
         

break;
case 56:
this.$=new Nodo('VALORES');this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                                 
break;
case 57:
this.$=new Nodo('VALORES');this.$.push($$[$0]); 
break;
case 58: case 59:
this.$=new Nodo('AUM');this.$.push(new Nodo($$[$0])); 
break;
case 60:
this.$=new Nodo('IMPRIMIR');
                this.$.push(new Nodo($$[$0-3]));this.$.push(new Nodo($$[$0-2]));
                this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0])); 
break;
case 61:
this.$=new Nodo('IMPRIMIR');
                this.$.push(new Nodo($$[$0-3]));this.$.push(new Nodo($$[$0-2]));
                this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                 
break;
case 62:

        this.$=new Nodo('FOR');this.$.push(new Nodo($$[$0-11]));this.$.push(new Nodo($$[$0-10]));
        this.$.push($$[$0-9]);this.$.push(new Nodo($$[$0-8]));this.$.push(new Nodo($$[$0-7]));
        this.$.push($$[$0-6]);this.$.push(new Nodo($$[$0-5]));this.$.push($$[$0-4]);this.$.push(new Nodo($$[$0-3]));
        this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);

break;
case 63:
this.$=new Nodo('WHILE');
        this.$.push(new Nodo($$[$0-4]));this.$.push(new Nodo($$[$0-3]));this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));
        this.$.push($$[$0]);  

break;
case 64:

        this.$=new Nodo('DOWHILE');this.$.push(new Nodo($$[$0-6]));this.$.push($$[$0-5]);
        this.$.push(new Nodo($$[$0-4]));this.$.push(new Nodo($$[$0-3]));this.$.push($$[$0-2]);
        this.$.push(new Nodo($$[$0-1]));this.$.push(new Nodo($$[$0]));
         

break;
case 65:

        this.$=new Nodo('IF_');this.$.push(new Nodo($$[$0-5]));this.$.push(new Nodo($$[$0-4]));
        this.$.push($$[$0-3]);this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push($$[$0]);
         

break;
case 66:

        this.$=new Nodo('IF_');this.$.push(new Nodo($$[$0-4]));this.$.push(new Nodo($$[$0-3]));
        this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
         

break;
case 67:
this.$=new Nodo('ELSE_');this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                     
break;
case 68: case 69:
this.$=new Nodo('ELSE_1');this.$.push($$[$0]); 
break;
case 70:
this.$=new Nodo('EXP');this.$.push($$[$0]); 
break;
case 71:
this.$=new Nodo('EXP_LOG');this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]); 
break;
case 72: case 73: case 74:
this.$=new Nodo('EXP_LOG');this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]); 
break;
case 75:
this.$=new Nodo('EXP_LOG');this.$.push($$[$0]); 
break;
case 76: case 77: case 78: case 79: case 80: case 81:
this.$=new Nodo('EXP_REL');this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]); 
break;
case 82:
this.$=new Nodo('EXP_REL');this.$.push($$[$0]); 
break;
case 83:
this.$=new Nodo('EXP_NUMERICA');this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]); 
break;
case 84: case 85: case 86: case 87:
this.$=new Nodo('EXP_NUMERICA');this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]); 
break;
case 88:
this.$=new Nodo('EXP_NUMERICA');this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0])); 
break;
case 89: case 90: case 91:
this.$=new Nodo('EXP_NUMERICA');this.$.push($$[$0]); 
break;
case 92:
this.$=new Nodo('EXP_NUMERICA');this.$.push(new Nodo($$[$0])); 
break;
case 93:
Errores.push(['Error Sint치ctico',"Se encontr칩 '"+yytext+"' y se esperaba: una expresion.",this._$.first_line,this._$.first_column]);this.$=new Nodo('EXP_NUMERICA');this.$.push(new Nodo("error '"+yytext+"'"));
                                             console.log('Error Sintactico, se encontro ('+yytext+') y se esperaba public, int,char,string,double o boolean. En linea:'+this._$.first_line+', Columna:'+this._$.first_column);
break;
case 94: case 95: case 96: case 97: case 98: case 99:
this.$=new Nodo('VALOR');this.$.push(new Nodo($$[$0]));
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:8,12:[1,9],13:[1,10]},{11:[1,11]},{1:[2,1]},o($V2,[2,2]),{9:[1,12]},{9:[2,6]},{9:[2,7]},o($V2,[2,5]),{10:13,14:[1,14]},o($V2,[2,4]),{2:$V3,7:$V4,11:[1,16],15:15,16:17,17:18,18:19,20:22,34:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{2:$V3,7:$V4,11:[1,28],16:29,17:18,18:19,20:22,34:$V5,39:$V6,40:$V7,41:$V8,42:$V9},o($V2,[2,9]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),{11:[1,31],19:[1,30]},{20:35,26:32,31:[1,33],32:[1,34],34:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{9:$Vb,21:36},{9:[2,28]},{9:[2,29]},{9:[2,30]},{9:[2,31]},{9:[2,32]},o($V2,[2,8]),o($Va,[2,10]),o($Va,[2,14]),o($Va,[2,23]),{9:[1,38]},{32:[1,39]},{9:[2,26]},{9:[2,27]},o($Vc,[2,15]),{19:$Vd,22:41,23:$Ve,24:[1,40]},{27:[1,44]},{33:[1,45]},{9:$Vf,25:46,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},o($Vc,[2,19]),{9:$Vb,21:63},o($Vc,[2,17]),{20:66,28:64,29:[1,65],34:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{27:[1,67]},{19:$Vd,22:68,23:$Ve},o($Vp,[2,70]),{9:$Vf,27:$Vg,53:54,54:53,70:69,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},o($Vp,[2,75],{71:[1,70],72:[1,71],73:[1,72]}),o($Vq,[2,82],{75:[1,73],76:[1,74],77:[1,75],78:[1,76],79:[1,77],80:[1,78],81:$Vr,82:$Vs,83:$Vt,84:$Vu}),{9:$Vf,27:$Vg,53:54,54:53,74:83,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{2:[1,85],9:$Vf,27:$Vg,53:54,54:53,74:84,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},o($Vv,[2,89]),o($Vv,[2,90]),o($Vv,[2,91]),o($Vv,[2,92],{27:$Vw,57:$Vx,58:$Vy}),o($Vv,[2,94]),o($Vv,[2,95]),o($Vv,[2,96]),o($Vv,[2,97]),o($Vv,[2,98]),o($Vv,[2,99]),o($Vc,[2,16]),{23:[1,90],29:[1,89]},{14:$Vz,19:$VA,30:91,38:92},{9:[1,95]},{34:[1,96]},o($Vc,[2,18]),o($Vp,[2,71]),{9:$Vf,27:$Vg,53:54,54:53,70:97,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,70:98,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,70:99,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:100,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:101,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:102,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:103,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:104,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:105,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:106,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:107,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:108,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,27:$Vg,53:54,54:53,74:109,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},o($Vv,[2,83]),{29:[1,110],81:$Vr,82:$Vs,83:$Vt,84:$Vu},{29:[1,111]},o($Vv,[2,58]),o($Vv,[2,59]),{9:$Vf,25:113,27:$Vg,53:54,54:53,56:112,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{14:$Vz,19:$VA,30:114,38:92},{20:115,34:$V5,39:$V6,40:$V7,41:$V8,42:$V9},o($Va,[2,21]),o($Va,[2,24]),o($Va,[2,25]),{2:$VB,9:$VC,11:[1,117],18:126,20:22,34:$V5,39:$V6,40:$V7,41:$V8,42:$V9,43:127,44:116,45:118,46:119,47:120,48:121,49:122,50:$VD,51:$VE,52:$VF,53:128,54:129,55:130,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},o($VM,[2,34]),{35:[1,139]},o($Vp,[2,72]),o($Vp,[2,73]),o($Vp,[2,74]),o($Vq,[2,76],{81:$Vr,82:$Vs,83:$Vt,84:$Vu}),o($Vq,[2,77],{81:$Vr,82:$Vs,83:$Vt,84:$Vu}),o($Vq,[2,78],{81:$Vr,82:$Vs,83:$Vt,84:$Vu}),o($Vq,[2,79],{81:$Vr,82:$Vs,83:$Vt,84:$Vu}),o($Vq,[2,80],{81:$Vr,82:$Vs,83:$Vt,84:$Vu}),o($Vq,[2,81],{81:$Vr,82:$Vs,83:$Vt,84:$Vu}),o($VN,[2,84],{83:$Vt,84:$Vu}),o($VN,[2,85],{83:$Vt,84:$Vu}),o($Vv,[2,86]),o($Vv,[2,87]),o($Vv,[2,88]),o($Vv,[2,93]),{23:[1,141],29:[1,140]},o($VM,[2,57]),o($Va,[2,20]),{9:[1,142]},{2:$VB,9:$VC,11:[1,143],18:126,20:22,34:$V5,39:$V6,40:$V7,41:$V8,42:$V9,43:127,45:144,46:119,47:120,48:121,49:122,50:$VD,51:$VE,52:$VF,53:128,54:129,55:130,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},o($VO,[2,37]),o($VP,[2,39]),o($VP,[2,40]),o($VP,[2,41]),o($VP,[2,42]),o($VP,[2,43]),{19:[1,145]},{19:[1,146]},{9:$Vf,19:[1,148],25:147,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},o($VP,[2,48]),{19:[1,149]},{19:[1,150]},{19:[1,151]},{19:[1,152]},{11:[1,154],19:[1,153]},{27:[1,155]},{27:[1,156]},{14:$Vz,38:157},{27:[1,158]},{24:[1,159],27:$Vw,57:$Vx,58:$Vy},{27:[1,160]},{27:[1,161]},{36:[1,162]},o($Vv,[2,55]),{9:$Vf,25:163,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},o($VM,[2,33]),o($VO,[2,36]),o($VP,[2,38]),o($VP,[2,44]),o($VP,[2,45]),{19:[1,164]},o($VP,[2,47]),o($VP,[2,49]),o($VP,[2,50]),o($VP,[2,51]),o($VP,[2,52]),o($VP,[2,53]),o($VP,[2,54]),{20:165,34:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{9:$Vf,25:166,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{62:[1,167]},{9:$Vf,25:168,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,25:169,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,25:170,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{9:$Vf,25:171,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{37:[1,172]},o($VM,[2,56]),o($VP,[2,46]),{9:[1,173]},{29:[1,174]},{27:[1,175]},{29:[1,176]},{19:[2,35]},{29:[1,177]},{29:[1,178]},{29:[1,179]},{24:[1,180]},{14:$Vz,38:181},{9:$Vf,25:182,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},{14:$Vz,38:183},{19:[2,60]},{19:[2,61]},{14:$Vz,38:184},{9:$Vf,25:185,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},o($VP,[2,63]),{29:[1,186]},o($VP,[2,66],{65:187,66:[1,188]}),o($Va,[2,22]),{19:[1,189]},{19:[1,190]},o($VP,[2,65]),{14:$Vz,38:193,49:192,64:$VL,67:191},{9:$Vf,25:194,27:$Vg,53:54,54:53,68:47,69:$Vh,70:49,74:50,81:$Vi,85:55,86:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,91:$Vo},o($VP,[2,64]),o($VP,[2,67]),o($VP,[2,68]),o($VP,[2,69]),{19:[1,195]},{9:[1,197],54:196},{29:[1,198]},{57:$Vx,58:$Vy},{14:$Vz,38:199},o($VP,[2,62])],
defaultActions: {6:[2,1],9:[2,6],10:[2,7],23:[2,28],24:[2,29],25:[2,30],26:[2,31],27:[2,32],34:[2,26],35:[2,27],169:[2,35],177:[2,60],178:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//importaciones
        const Nodo=require('./Nodo').Nodo;
        let traduccion="";
        let Errores=[];
        let tabs="";
        function UnTabMenos(){
                tabs.substring(0,tabs.length-1);
        }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l칤nea
break;
case 2:// comentario multiple l칤neas
break;
case 3:return 39;
break;
case 4:return 40;
break;
case 5:return 34;
break;
case 6:return 41;
break;
case 7:return 42;
break;
case 8:return 62;
break;
case 9:return 64;
break;
case 10:return 63;
break;
case 11:return 66;
break;
case 12:return 12;
break;
case 13:return 13;
break;
case 14:return 32;
break;
case 15:return 59;
break;
case 16:return 60;
break;
case 17:return 90;
break;
case 18:return 91;
break;
case 19:return 61;
break;
case 20:return 7;
break;
case 21:return 31;
break;
case 22:return 52;
break;
case 23:return 50;
break;
case 24:return 51;
break;
case 25:return 33;
break;
case 26:return 37;
break;
case 27:return 35;  
break;
case 28:return 36;  
break;
case 29:return 14;  
break;
case 30:return 11;  
break;
case 31:return 19; 
break;
case 32:return 57;  
break;
case 33:return 58;  
break;
case 34:return 82; 
break;
case 35:return 81;
break;
case 36:return 83;
break;
case 37:return 84
break;
case 38:return 27;  
break;
case 39:return 29;  
break;
case 40:return 75;  
break;
case 41:return 76;  
break;
case 42:return 79;  
break;
case 43:return 80; 
break;
case 44:return 78;  
break;
case 45:return 77;
break;
case 46:return 24;  
break;
case 47:return 69;  
break;
case 48:return 73;  
break;
case 49:return 71;
break;
case 50:return 72;  
break;
case 51:return 'punto';  
break;
case 52:return 23;  
break;
case 53:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 86;
break;
case 54:return 89;  
break;
case 55:return 88;
break;
case 56:return 9;
break;
case 57:return 87;
break;
case 58:/*se ignoran*/ 
break;
case 59:return 5;   
break;
case 60:Errores.push(['Error Lexico',"El Caracter '"+yy_.yytext +"' no pertenece al lenguaje.",yy_.yylloc.first_line, yy_.yylloc.first_column]);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:system\.out\.print\b)/i,/^(?:system\.out\.println\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9])?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([A-Za-z])[A-Za-z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:[ \t\r\n\f\b]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica2;
exports.Parser = gramatica2.Parser;
exports.parse = function () { return gramatica2.parse.apply(gramatica2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}