/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[1,18],$V3=[1,23],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,24],$V8=[7,15,33,39,40,41,42],$V9=[7,15,33,38,39,40,41,42],$Va=[1,37],$Vb=[1,35],$Vc=[1,50],$Vd=[1,46],$Ve=[1,42],$Vf=[1,45],$Vg=[1,51],$Vh=[1,52],$Vi=[1,53],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[7,15,22,33,38,39,40,41,42],$Vn=[7,15,22,28,33,38,39,40,41,42],$Vo=[7,15,22,28,33,38,39,40,41,42,73,74,75],$Vp=[1,73],$Vq=[1,72],$Vr=[1,74],$Vs=[1,75],$Vt=[7,15,22,28,33,38,39,40,41,42,73,74,75,77,78,79,80,81,82,83,84,85,86],$Vu=[1,80],$Vv=[1,78],$Vw=[1,79],$Vx=[1,107],$Vy=[22,28],$Vz=[7,15,22,28,33,38,39,40,41,42,73,74,75,77,78,79,80,81,82,83,84],$VA=[1,131],$VB=[1,119],$VC=[1,120],$VD=[1,121],$VE=[1,132],$VF=[1,133],$VG=[1,127],$VH=[1,128],$VI=[1,129],$VJ=[1,130],$VK=[7,9,15,33,39,40,41,42,50,51,52,60,61,62,64,65,66,68],$VL=[9,15,33,39,40,41,42,50,51,52,60,61,62,64,65,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CLASES":4,"EOF":5,"CLASE":6,"rpublic":7,"TCLASS":8,"id":9,"BLOQUEC":10,"rclass":11,"rinterface":12,"llaveizq":13,"VARIASIC":14,"llaveder":15,"INSTCLASE":16,"FUNMET":17,"DECLARACION":18,"T":19,"ASIGNA":20,"DECL":21,"coma":22,"igual":23,"EXP":24,"T_FM":25,"parizq":26,"PARAMETROS":27,"parder":28,"T_IC":29,"rstatic":30,"rvoid":31,"rmain":32,"rstring":33,"corizq":34,"corder":35,"args":36,"BLOQUEI":37,"puntoycoma":38,"rint":39,"rdouble":40,"rboolean":41,"rchar":42,"ASIGNACION":43,"INSTRUCCIONES":44,"INSTRUCCION":45,"FOR":46,"WHILE":47,"DOWHILE":48,"IF_":49,"rbreak":50,"rcontinue":51,"rreturn":52,"LLAMADA":53,"AUM":54,"IMPRIMIR":55,"E":56,"VALORES":57,"masmas":58,"menosmenos":59,"rprint":60,"rprintln":61,"rfor":62,"EXP_AD":63,"rwhile":64,"rdo":65,"rif":66,"ELSE_":67,"relse":68,"ELSE_1":69,"EXP_LOG":70,"not":71,"EXP_REL":72,"or":73,"xor":74,"and":75,"EXP_NUMERICA":76,"igualigual":77,"diferente":78,"menor":79,"mayor":80,"mayorigual":81,"menorigual":82,"menos":83,"mas":84,"por":85,"division":86,"VALOR":87,"cadena":88,"char":89,"entero":90,"double":91,"rtrue":92,"rfalse":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"rpublic",9:"id",11:"rclass",12:"rinterface",13:"llaveizq",15:"llaveder",22:"coma",23:"igual",26:"parizq",28:"parder",30:"rstatic",31:"rvoid",32:"rmain",33:"rstring",34:"corizq",35:"corder",36:"args",38:"puntoycoma",39:"rint",40:"rdouble",41:"rboolean",42:"rchar",50:"rbreak",51:"rcontinue",52:"rreturn",58:"masmas",59:"menosmenos",60:"rprint",61:"rprintln",62:"rfor",63:"EXP_AD",64:"rwhile",65:"rdo",66:"rif",68:"relse",71:"not",73:"or",74:"xor",75:"and",77:"igualigual",78:"diferente",79:"menor",80:"mayor",81:"mayorigual",82:"menorigual",83:"menos",84:"mas",85:"por",86:"division",88:"cadena",89:"char",90:"entero",91:"double",92:"rtrue",93:"rfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[8,1],[8,1],[10,3],[10,2],[14,2],[14,1],[16,1],[16,1],[18,3],[18,2],[21,4],[21,3],[20,2],[20,1],[17,7],[17,11],[29,1],[29,1],[25,1],[25,1],[19,1],[19,1],[19,1],[19,1],[19,1],[27,4],[27,2],[43,3],[37,3],[37,2],[44,2],[44,1],[45,1],[45,1],[45,1],[45,1],[45,2],[45,2],[45,3],[45,2],[45,2],[45,2],[45,2],[45,2],[45,2],[56,1],[56,1],[56,1],[53,4],[57,3],[57,1],[54,2],[54,2],[55,4],[55,4],[46,12],[47,5],[48,7],[49,6],[49,5],[67,2],[69,1],[69,1],[24,1],[70,2],[70,3],[70,3],[70,3],[70,1],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,1],[76,2],[76,3],[76,3],[76,3],[76,3],[76,3],[76,1],[76,1],[76,1],[76,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new Nodo('CLASES');
                this.$.push($$[$0-1]); 
                return {AST:this.$,Errores:Errores,Traduccion:traduccion}; 
break;
case 2:
this.$=new Nodo('CLASES'); this.$.push($$[$0-1]);this.$.push($$[$0]);
break;
case 3:
this.$=new Nodo('CLASES'); this.$.push($$[$0]);
break;
case 4:
this.$=new Nodo('CLASE');this.$.push(new Nodo($$[$0-3]));
                this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));
                //se empieza la traduccion
                        if($$[$0-2].getContenido()!='interface'){
                                traduccion+='\n'+$$[$0-2].getContenido()+$$[$0-1]+$$[$0].getContenido();
                                UnTabMenos();
                        }
                
break;
case 5:
this.$=new Nodo('TCLASS');this.$.push($$[$0]);
                this.$.setContenido("class");
break;
case 6:
this.$=new Nodo('TCLASS');this.$.push($$[$0])
            this.$.setContenido('interface');
                
break;
case 7:
this.$=new Nodo('BLOQUEC');this.$.push(new Nodo('{'));
                                        this.$.push($$[$0-1]);this.$.push(new Nodo('}'));tabs+="\t";
                                        this.$.setContenido('{'+$$[$0-1].getContenido()+'\n}');
break;
case 8:
this.$=new Nodo('BLOQUEC');this.$.push(new Nodo('{'));
                                this.$.push(new Nodo('}'));
                                this.$.setContenido('{\n}');
break;
case 9:
this.$=new Nodo('VARIASIC');this.$.push($$[$0-1]);this.$.push($$[$0]);
                                this.$.setContenido($$[$0-1].getContenido()+$$[$0].getContenido());
break;
case 10:
this.$=new Nodo('VARIASIC');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());UnTabMenos();
break;
case 11:
this.$=new Nodo('INSTCLASE');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 12:
this.$=new Nodo('INSTCLASE');this.$.push($$[$0]);
                        this.$.setContenido($$[$0].getContenido());
break;
case 13:
this.$=new Nodo('DECLARACION');this.$.push($$[$0-2]);
                                this.$.push(new Nodo($$[$0-1])); this.$.push($$[$0]);
                                this.$.setContenido("\n"+tabs+"var "+$$[$0-1]+$$[$0].getContenido());
break;
case 14:
this.$=new Nodo('DECLARACION');this.$.push($$[$0-1]);
                                this.$.push(new Nodo($$[$0]));this.$.setContenido('\n'+tabs+"var "+$$[$0]);
break;
case 15:
this.$=new Nodo('DECL');this.$.push($$[$0-3]);this.$.push(new Nodo($$[$0-2]));
                                this.$.push(new Nodo($$[$0-1])); this.$.push($$[$0]);
                                this.$.setContenido('\n'+$$[$0-3].getContenido()+$$[$0-2]+ $$[$0-1] +$$[$0].getContenido());
break;
case 16:
this.$=new Nodo('DECL');+this.$.push(new Nodo($$[$0-2]));
                this.$.push(new Nodo($$[$0-1])); this.$.push($$[$0]);
                this.$.setContenido('\n'+$$[$0-2]+ $$[$0-1] +$$[$0].getContenido());

        
break;
case 17:
this.$=new Nodo('ASIGNA');this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                        this.$.setContenido('= '+$$[$0].getContenido());
break;
case 18:
this.$=new Nodo('ASIGNA');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 19:

                this.$=new Nodo('FUNMET'); this.$.push(new Nodo($$[$0-6]));
                this.$.push($$[$0-5]); this.$.push(new Nodo($$[$0-4]));
                this.$.push(new Nodo($$[$0-3])); 
                this.$.push($$[$0-2]); this.$.push(new Nodo($$[$0-1])); this.$.push($$[$0]);
                this.$.setContenido('\n'+tabs+'function '+$$[$0-4]+$$[$0-3]+$$[$0-2].getContenido()+$$[$0-1]+$$[$0].getContenido());
        
break;
case 20:

                    this.$=new Nodo('FUNMET'); this.$.push(new Nodo($$[$0-10])); this.$.push(new Nodo($$[$0-9]));
                    this.$.push(new Nodo($$[$0-8])); this.$.push(new Nodo($$[$0-7])); this.$.push(new Nodo($$[$0-6]));
                    this.$.push(new Nodo($$[$0-5]));this.$.push(new Nodo($$[$0-4])); this.$.push(new Nodo($$[$0-3]));
                    this.$.push(new Nodo($$[$0-2]));this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                    //traduccion
            
break;
case 21:
this.$=new Nodo('T_IC');this.$.push(new Nodo($$[$0]));
break;
case 22:
this.$=new Nodo('T_IC');this.$.push($$[$0]);
                        this.$.setContenido($$[$0].getContenido());
break;
case 23:
this.$=new Nodo('T_FM');this.$.push(new Nodo($$[$0]));
break;
case 24:
this.$=new Nodo('T_FM');this.$.push($$[$0]);
break;
case 25: case 26: case 27: case 28: case 29:
this.$=new Nodo('T');this.$.push(new Nodo($$[$0]));
break;
case 30:
this.$=new Nodo('PARAMETROS');this.$.push($$[$0-3]);
                this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                this.$.setContenido($$[$0-3].getContenido()+$$[$0-2]+" "+$$[$0]);
break;
case 31:
this.$=new Nodo('PARAMETROS');this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
break;
case 32:
this.$=new Nodo('ASIGNACION');this.$.push(new Nodo($$[$0-2]));
                this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                this.$.setContenido('\n'+$$[$0-2]+' = '+$$[$0].getContenido());
break;
case 33:
this.$=new Nodo('BLOQUEI');this.$.push(new Nodo($$[$0-2]));
                this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));tabs+="\t";
                this.$.setContenido('{'+$$[$0-1].getContenido()+'\n}');
break;
case 34:
this.$=new Nodo('BLOQUEI');this.$.push(new Nodo($$[$0-1]));this.$.push(new Nodo($$[$0]));
                this.$.setContenido('{\n}');
break;
case 35:
this.$=new Nodo('INSTRUCCIONES');this.$.push($$[$0-1]);this.$.push($$[$0]);
                if($$[$0] instanceof Nodo){this.$.setContenido($$[$0-1].getContenido()+$$[$0].getContenido());}
break;
case 36:
this.$=new Nodo('INSTRUCCIONES');this.$.push($$[$0]);
                                if($$[$0] instanceof Nodo){this.$.setContenido($$[$0].getContenido());UnTabMenos();}
break;
case 37: case 38: case 39: case 40:
this.$=new Nodo('INSTRUCCION');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 41: case 42: case 44:
this.$=new Nodo('INSTRUCCION');this.$.push(new Nodo($$[$0-1]));this.$.push(new Nodo($$[$0]));
                                        this.$.setContenido('\n'+tabs+$$[$0-1]+$$[$0]);
break;
case 43:
this.$=new Nodo('INSTRUCCION');this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                                        this.$.setContenido('\n'+tabs+$$[$0-2]+$$[$0-1].getContenido()+$$[$0]);
break;
case 45: case 46:
this.$=new Nodo('INSTRUCCION');this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                                        this.$.setContenido($$[$0-1].getContenido()+$$[$0]);
break;
case 47: case 48: case 49:
this.$=new Nodo('INSTRUCCION');this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                                        this.$.setContenido('\n'+tabs+$$[$0-1].getContenido()+$$[$0]);
break;
case 53:

        this.$=new Nodo('LLAMADA');this.$.push(new Nodo($$[$0-3]));this.$.push(new Nodo($$[$0-2]));
        this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
        this.$.setContenido($$[$0-3]+$$[$0-2]+$$[$0-1].getContenido()+$$[$0]);

break;
case 54:
this.$=new Nodo('VALORES');this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                                this.$.setContenido($$[$0-2].getContenido()+$$[$0-1]+$$[$0].getContenido());
break;
case 55:
this.$=new Nodo('VALORES');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 56: case 57:
this.$=new Nodo('AUM');this.$.push(new Nodo($$[$0]));this.$.setContenido($$[$0-1]+$$[$0]);
break;
case 58:
this.$=new Nodo('IMPRIMIR');
                this.$.push(new Nodo($$[$0-3]));this.$.push(new Nodo($$[$0-2]));
                this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));this.$.setContenido('console.log('+$$[$0-1].getContenido()+')');
break;
case 59:
this.$=new Nodo('IMPRIMIR');
                this.$.push(new Nodo($$[$0-3]));this.$.push(new Nodo($$[$0-2]));
                this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));
                this.$.setContenido('console.log('+$$[$0-1].getContenido()+'\\n)');
break;
case 60:

        this.$=new Nodo('FOR');this.$.push(new Nodo($$[$0-11]));this.$.push(new Nodo($$[$0-10]));
        this.$.push($$[$0-9]);this.$.push(new Nodo($$[$0-8]));this.$.push(new Nodo($$[$0-7]));
        this.$.push($$[$0-6]);this.$.push(new Nodo($$[$0-5]));this.$.push($$[$0-4]);this.$.push(new Nodo($$[$0-3]));
        this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
        this.$.setContenido('\n'+tabs+$$[$0-11]+$$[$0-10]+$$[$0-8]+$$[$0-7]+$$[$0-6].getContenido()+$$[$0-5]+$$[$0-4].getContenido()+$$[$0-3]+$$[$0-2].getContenido()
        +$$[$0-1]+$$[$0].getContenido());

break;
case 61:
this.$=new Nodo('WHILE');
        this.$.push(new Nodo($$[$0-4]));this.$.push(new Nodo($$[$0-3]));this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));
        this.$.push($$[$0]); this.$.setContenido('\n'+tabs+$$[$0-4]+$$[$0-3]+$$[$0-2].getContenido()+$$[$0-1]+$$[$0].getContenido());

break;
case 62:

        this.$=new Nodo('DOWHILE');this.$.push(new Nodo($$[$0-6]));this.$.push($$[$0-5]);
        this.$.push(new Nodo($$[$0-4]));this.$.push(new Nodo($$[$0-3]));this.$.push($$[$0-2]);
        this.$.push(new Nodo($$[$0-1]));this.$.push(new Nodo($$[$0]));
        this.$.setContenido('\n'+tabs+$$[$0-6]+$$[$0-5].getContenido()+$$[$0-4]+$$[$0-3]+$$[$0-2].getContenido()+$$[$0-1]+$$[$0]);

break;
case 63:

        this.$=new Nodo('IF_');this.$.push(new Nodo($$[$0-5]));this.$.push(new Nodo($$[$0-4]));
        this.$.push($$[$0-3]);this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push($$[$0]);
        this.$.setContenido('\n'+tabs+$$[$0-5]+$$[$0-4]+$$[$0-3].getContenido()+$$[$0-2]+$$[$0-1].getContenido()+$$[$0].getContenido());

break;
case 64:

        this.$=new Nodo('IF_');this.$.push(new Nodo($$[$0-4]));this.$.push(new Nodo($$[$0-3]));
        this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
        this.$.setContenido('\n'+tabs+$$[$0-4]+$$[$0-3]+$$[$0-2].getContenido()+$$[$0-1]+$$[$0].getContenido());

break;
case 65:
this.$=new Nodo('ELSE_');this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);
                    this.$.setContenido(tabs+$$[$0-1]+$$[$0].getContenido());
break;
case 66: case 67:
this.$=new Nodo('ELSE_1');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 68:
this.$=new Nodo('EXP');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 69:
this.$=new Nodo('EXP_LOG');this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);this.$.setContenido($$[$0-1]+$$[$0].getContenido());
break;
case 70: case 71: case 72:
this.$=new Nodo('EXP_LOG');this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);this.$.setContenido($$[$0-2].getContenido()+' '+$$[$0-1]+' '+$$[$0].getContenido());
break;
case 73:
this.$=new Nodo('EXP_LOG');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 74: case 75: case 76: case 77: case 78: case 79:
this.$=new Nodo('EXP_REL');this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);this.$.setContenido($$[$0-2].getContenido()+$$[$0-1]+$$[$0].getContenido());
break;
case 80:
this.$=new Nodo('EXP_REL');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 81:
this.$=new Nodo('EXP_NUMERICA');this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);this.$.setContenido($$[$0-1]+$$[$0].getContenido());
break;
case 82: case 83: case 84: case 85:
this.$=new Nodo('EXP_NUMERICA');this.$.push($$[$0-2]);this.$.push(new Nodo($$[$0-1]));this.$.push($$[$0]);this.$.setContenido($$[$0-2].getContenido()+' '+$$[$0-1]+' '+$$[$0].getContenido());
break;
case 86:
this.$=new Nodo('EXP_NUMERICA');this.$.push(new Nodo($$[$0-2]));this.$.push($$[$0-1]);this.$.push(new Nodo($$[$0]));this.$.setContenido($$[$0-2]+$$[$0-1].getContenido()+$$[$0]);
break;
case 87: case 88: case 89:
this.$=new Nodo('EXP_NUMERICA');this.$.push($$[$0]);this.$.setContenido($$[$0].getContenido());
break;
case 90:
this.$=new Nodo('EXP_NUMERICA');this.$.push(new Nodo($$[$0]));this.$.setContenido($$[$0]);
break;
case 91: case 92: case 93: case 94: case 95: case 96:
this.$=new Nodo('VALOR');this.$.push(new Nodo($$[$0]));
break;
}
},
table: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5],6:6,7:$V0},o($V1,[2,3]),{8:7,11:[1,8],12:[1,9]},{1:[2,1]},o($V1,[2,2]),{9:[1,10]},{9:[2,5]},{9:[2,6]},{10:11,13:[1,12]},o($V1,[2,4]),{7:$V2,14:13,15:[1,14],16:15,17:16,18:17,19:19,33:$V3,39:$V4,40:$V5,41:$V6,42:$V7},{7:$V2,15:[1,25],16:26,17:16,18:17,19:19,33:$V3,39:$V4,40:$V5,41:$V6,42:$V7},o($V1,[2,8]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),{19:30,25:27,30:[1,28],31:[1,29],33:$V3,39:$V4,40:$V5,41:$V6,42:$V7},{9:[1,31]},{9:[2,25]},{9:[2,26]},{9:[2,27]},{9:[2,28]},{9:[2,29]},o($V1,[2,7]),o($V8,[2,9]),{9:[1,32]},{31:[1,33]},{9:[2,23]},{9:[2,24]},o($V9,[2,14],{20:34,21:36,22:$Va,23:$Vb}),{26:[1,38]},{32:[1,39]},o($V9,[2,13]),{9:$Vc,24:40,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($V9,[2,18],{22:[1,57]}),{9:[1,58]},{19:60,27:59,33:$V3,39:$V4,40:$V5,41:$V6,42:$V7},{26:[1,61]},o($Vm,[2,17]),o($Vn,[2,68]),{9:$Vc,26:$Vd,53:48,54:47,72:62,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($Vn,[2,73],{73:[1,63],74:[1,64],75:[1,65]}),o($Vo,[2,80],{77:[1,66],78:[1,67],79:[1,68],80:[1,69],81:[1,70],82:[1,71],83:$Vp,84:$Vq,85:$Vr,86:$Vs}),{9:$Vc,26:$Vd,53:48,54:47,76:76,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,24:77,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($Vt,[2,87]),o($Vt,[2,88]),o($Vt,[2,89]),o($Vt,[2,90],{26:$Vu,58:$Vv,59:$Vw}),o($Vt,[2,91]),o($Vt,[2,92]),o($Vt,[2,93]),o($Vt,[2,94]),o($Vt,[2,95]),o($Vt,[2,96]),{9:[1,81]},{20:82,21:36,22:$Va,23:$Vb},{22:[1,84],28:[1,83]},{9:[1,85]},{33:[1,86]},o($Vn,[2,69]),{9:$Vc,26:$Vd,53:48,54:47,72:87,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,72:88,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,72:89,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:90,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:91,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:92,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:93,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:94,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:95,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:96,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:97,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:98,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,26:$Vd,53:48,54:47,76:99,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($Vt,[2,81]),{28:[1,100]},o($Vt,[2,56]),o($Vt,[2,57]),{9:$Vc,24:102,26:$Vd,53:48,54:47,57:101,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{20:103,21:36,22:$Va,23:$Vb},o($Vm,[2,16]),{13:$Vx,29:104,37:106,38:[1,105]},{19:108,33:$V3,39:$V4,40:$V5,41:$V6,42:$V7},o($Vy,[2,31]),{34:[1,109]},o($Vn,[2,70]),o($Vn,[2,71]),o($Vn,[2,72]),o($Vo,[2,74],{83:$Vp,84:$Vq,85:$Vr,86:$Vs}),o($Vo,[2,75],{83:$Vp,84:$Vq,85:$Vr,86:$Vs}),o($Vo,[2,76],{83:$Vp,84:$Vq,85:$Vr,86:$Vs}),o($Vo,[2,77],{83:$Vp,84:$Vq,85:$Vr,86:$Vs}),o($Vo,[2,78],{83:$Vp,84:$Vq,85:$Vr,86:$Vs}),o($Vo,[2,79],{83:$Vp,84:$Vq,85:$Vr,86:$Vs}),o($Vz,[2,82],{85:$Vr,86:$Vs}),o($Vz,[2,83],{85:$Vr,86:$Vs}),o($Vt,[2,84]),o($Vt,[2,85]),o($Vt,[2,86]),{22:[1,111],28:[1,110]},o($Vy,[2,55]),o($Vm,[2,15]),o($V8,[2,19]),o($V8,[2,21]),o($V8,[2,22]),{9:$VA,15:[1,113],18:122,19:19,33:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:123,44:112,45:114,46:115,47:116,48:117,49:118,50:$VB,51:$VC,52:$VD,53:124,54:125,55:126,60:$VE,61:$VF,62:$VG,64:$VH,65:$VI,66:$VJ},{9:[1,134]},{35:[1,135]},o($Vt,[2,53]),{9:$Vc,24:136,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$VA,15:[1,137],18:122,19:19,33:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:123,45:138,46:115,47:116,48:117,49:118,50:$VB,51:$VC,52:$VD,53:124,54:125,55:126,60:$VE,61:$VF,62:$VG,64:$VH,65:$VI,66:$VJ},o($VK,[2,34]),o($VL,[2,36]),o($VL,[2,37]),o($VL,[2,38]),o($VL,[2,39]),o($VL,[2,40]),{38:[1,139]},{38:[1,140]},{9:$Vc,24:141,26:$Vd,38:[1,142],53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{38:[1,143]},{38:[1,144]},{38:[1,145]},{38:[1,146]},{38:[1,147]},{26:[1,148]},{26:[1,149]},{13:$Vx,37:150},{26:[1,151]},{23:[1,152],26:$Vu,58:$Vv,59:$Vw},{26:[1,153]},{26:[1,154]},o($Vy,[2,30]),{36:[1,155]},o($Vy,[2,54]),o($VK,[2,33]),o($VL,[2,35]),o($VL,[2,41]),o($VL,[2,42]),{38:[1,156]},o($VL,[2,44]),o($VL,[2,45]),o($VL,[2,46]),o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),{19:157,33:$V3,39:$V4,40:$V5,41:$V6,42:$V7},{9:$Vc,24:158,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{64:[1,159]},{9:$Vc,24:160,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,24:161,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,24:162,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,24:163,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{28:[1,164]},o($VL,[2,43]),{9:[1,165]},{28:[1,166]},{26:[1,167]},{28:[1,168]},{38:[2,32]},{28:[1,169]},{28:[1,170]},{13:$Vx,37:171},{23:[1,172]},{13:$Vx,37:173},{9:$Vc,24:174,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{13:$Vx,37:175},{38:[2,58]},{38:[2,59]},o($V8,[2,20]),{9:$Vc,24:176,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($VL,[2,61]),{28:[1,177]},o($VL,[2,64],{67:178,68:[1,179]}),{38:[1,180]},{38:[1,181]},o($VL,[2,63]),{13:$Vx,37:184,49:183,66:$VJ,69:182},{9:$Vc,24:185,26:$Vd,53:48,54:47,70:41,71:$Ve,72:43,76:44,83:$Vf,87:49,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($VL,[2,62]),o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,67]),{38:[1,186]},{63:[1,187]},{28:[1,188]},{13:$Vx,37:189},o($VL,[2,60])],
defaultActions: {5:[2,1],8:[2,5],9:[2,6],20:[2,25],21:[2,26],22:[2,27],23:[2,28],24:[2,29],29:[2,23],30:[2,24],161:[2,32],169:[2,58],170:[2,59]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//importaciones
        let Nodo=require('./Nodo.js');
        let traduccion="";
        let Errores=[];
        let tabs="";
        function UnTabMenos(){
                tabs.substring(0,tabs.length-1);
        }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 39;
break;
case 4:return 40;
break;
case 5:return 33;
break;
case 6:return 41;
break;
case 7:return 42;
break;
case 8:return 64;
break;
case 9:return 66;
break;
case 10:return 65;
break;
case 11:return 68;
break;
case 12:return 11;
break;
case 13:return 12;
break;
case 14:return 31;
break;
case 15:return 60;
break;
case 16:return 61;
break;
case 17:return 92;
break;
case 18:return 93;
break;
case 19:return 62;
break;
case 20:return 7;
break;
case 21:return 30;
break;
case 22:return 52;
break;
case 23:return 50;
break;
case 24:return 51;
break;
case 25:return 'main';
break;
case 26:return 34;  
break;
case 27:return 35;  
break;
case 28:return 13;  
break;
case 29:return 15;  
break;
case 30:return 38; 
break;
case 31:return 58;  
break;
case 32:return 59;  
break;
case 33:return 84; 
break;
case 34:return 83;
break;
case 35:return 85;
break;
case 36:return 86
break;
case 37:return 26;  
break;
case 38:return 28;  
break;
case 39:return 77;  
break;
case 40:return 78;  
break;
case 41:return 81;  
break;
case 42:return 82; 
break;
case 43:return 80;  
break;
case 44:return 79;
break;
case 45:return 23;  
break;
case 46:return 71;  
break;
case 47:return 75;  
break;
case 48:return 73;
break;
case 49:return 74;  
break;
case 50:return 'punto';  
break;
case 51:return 22;  
break;
case 52:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 88;
break;
case 53:return 91;  
break;
case 54:return 90;
break;
case 55:return 9;
break;
case 56:return 89;
break;
case 57:/*se ignoran*/ 
break;
case 58:return 5;   
break;
case 59:Errores.push(('Error Lexico',"El Caracter '"+yy_.yytext +"' no pertenece al lenguaje.",yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:system\.out\.print\b)/i,/^(?:system\.out\.println\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:main\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9])?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([A-Za-z])[A-Za-z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:[ \t\r\n\f\b]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}