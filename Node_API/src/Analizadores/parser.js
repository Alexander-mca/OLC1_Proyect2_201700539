/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,21],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,22],$V7=[14,20,36],$V8=[2,15],$V9=[1,32],$Va=[1,44],$Vb=[1,42],$Vc=[1,38],$Vd=[1,41],$Ve=[1,45],$Vf=[1,46],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,50],$Vk=[14,20,26,36],$Vl=[1,65],$Vm=[1,64],$Vn=[1,66],$Vo=[1,67],$Vp=[14,20,26,36,68,69,70,72,73,74,75,76,77,78,79,80,81],$Vq=[1,91],$Vr=[2,28],$Vs=[14,20,26,36,68,69,70],$Vt=[14,20,26,36,68,69,70,72,73,74,75,76,77,78,79],$Vu=[1,100],$Vv=[1,120],$Vw=[1,110],$Vx=[1,111],$Vy=[1,112],$Vz=[1,121],$VA=[1,116],$VB=[1,117],$VC=[1,118],$VD=[1,119],$VE=[8,14,31,37,38,39,40,48,49,50,52,57,59,60,61,63],$VF=[8,14,31,37,38,39,40,48,49,50,52,57,59,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CLASES":4,"CLASE":5,"rpublic":6,"TCLASS":7,"id":8,"BLOQUEC":9,"rclass":10,"rinterface":11,"llaveizq":12,"INSTCLASE":13,"llaveder":14,"FUNMET":15,"DECLARACION":16,"T":17,"ASIGNA":18,"DECL":19,"coma":20,"igual":21,"EXP":22,"T_FM":23,"parizq":24,"PARAMETROS":25,"parder":26,"T_IC":27,"rstatic":28,"rvoid":29,"rmain":30,"rstring":31,"corizq":32,"corder":33,"args":34,"BLOQUEI":35,"puntoycoma":36,"rint":37,"rdouble":38,"rboolean":39,"rchar":40,"ASIGNACION":41,"INSTRUCCIONES":42,"INSTRUCCION":43,"FOR":44,"WHILE":45,"DOWHILE":46,"IF_":47,"break":48,"continue":49,"rreturn":50,"IMPRIMIR":51,"rsystem":52,"punto":53,"rout":54,"rprint":55,"rprintln":56,"rfor":57,"EXP_AD":58,"rwhile":59,"rdo":60,"rif":61,"ELSE_":62,"relse":63,"ELSE_1":64,"EXP_LOG":65,"not":66,"EXP_REL":67,"or":68,"xor":69,"and":70,"EXP_NUMERICA":71,"igualigual":72,"diferente":73,"menor":74,"mayor":75,"mayorigual":76,"menorigual":77,"menos":78,"mas":79,"por":80,"division":81,"VALOR":82,"M":83,"masmas":84,"menosmenos":85,"string":86,"char":87,"int":88,"double":89,"rtrue":90,"rfalse":91,"$accept":0,"$end":1},
terminals_: {2:"error",6:"rpublic",8:"id",10:"rclass",11:"rinterface",12:"llaveizq",14:"llaveder",20:"coma",21:"igual",24:"parizq",26:"parder",28:"rstatic",29:"rvoid",30:"rmain",31:"rstring",32:"corizq",33:"corder",34:"args",36:"puntoycoma",37:"rint",38:"rdouble",39:"rboolean",40:"rchar",48:"break",49:"continue",50:"rreturn",52:"rsystem",53:"punto",54:"rout",55:"rprint",56:"rprintln",57:"rfor",58:"EXP_AD",59:"rwhile",60:"rdo",61:"rif",63:"relse",66:"not",68:"or",69:"xor",70:"and",72:"igualigual",73:"diferente",74:"menor",75:"mayor",76:"mayorigual",77:"menorigual",78:"menos",79:"mas",80:"por",81:"division",84:"masmas",85:"menosmenos",86:"string",87:"char",88:"int",89:"double",90:"rtrue",91:"rfalse"},
productions_: [0,[3,1],[4,2],[4,1],[5,4],[7,1],[7,1],[9,3],[9,2],[13,1],[13,1],[16,4],[19,4],[19,0],[18,2],[18,0],[15,9],[15,11],[27,1],[27,1],[23,1],[23,1],[17,1],[17,1],[17,1],[17,1],[17,1],[25,4],[25,0],[41,3],[35,3],[35,2],[42,2],[42,1],[43,1],[43,1],[43,1],[43,1],[43,2],[43,2],[43,3],[43,2],[43,2],[43,2],[43,2],[51,8],[51,8],[44,12],[45,5],[46,7],[47,6],[62,2],[62,0],[64,1],[64,1],[22,1],[65,2],[65,3],[65,3],[65,3],[65,1],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[71,2],[71,3],[71,3],[71,3],[71,3],[71,3],[71,1],[71,2],[83,1],[83,1],[83,0],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 78: case 79: case 80: case 81: case 82: case 83:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,5:3,6:$V0},{1:[3]},{1:[2,1],5:5,6:$V0},o($V1,[2,3]),{7:6,10:[1,7],11:[1,8]},o($V1,[2,2]),{8:[1,9]},{8:[2,5]},{8:[2,6]},{9:10,12:[1,11]},o($V1,[2,4]),{6:[1,16],13:12,14:[1,13],15:14,16:15,17:17,31:$V2,37:$V3,38:$V4,39:$V5,40:$V6},{14:[1,23]},o($V1,[2,8]),{14:[2,9]},{14:[2,10]},{17:27,23:24,28:[1,25],29:[1,26],31:$V2,37:$V3,38:$V4,39:$V5,40:$V6},{8:[1,28]},{8:[2,22]},{8:[2,23]},{8:[2,24]},{8:[2,25]},{8:[2,26]},o($V1,[2,7]),{8:[1,29]},{29:[1,30]},{8:[2,20]},{8:[2,21]},o($V7,$V8,{18:31,21:$V9}),{24:[1,33]},{30:[1,34]},o($V7,[2,13],{19:35}),{8:$Va,22:36,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{17:51,31:$V2,37:$V3,38:$V4,39:$V5,40:$V6},{24:[1,52]},o([14,36],[2,11],{20:[1,53]}),o($V7,[2,14]),o($Vk,[2,55]),{8:$Va,24:$Vb,67:54,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,60],{68:[1,55],69:[1,56],70:[1,57]}),{72:[1,58],73:[1,59],74:[1,60],75:[1,61],76:[1,62],77:[1,63],78:$Vl,79:$Vm,80:$Vn,81:$Vo},{8:$Va,24:$Vb,71:68,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:69,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vp,[2,73]),o($Vp,[2,77],{83:70,84:[1,71],85:[1,72]}),o($Vp,[2,78]),o($Vp,[2,79]),o($Vp,[2,80]),o($Vp,[2,81]),o($Vp,[2,82]),o($Vp,[2,83]),{8:[1,73]},{31:[1,74]},{8:[1,75]},o($Vk,[2,56]),{8:$Va,24:$Vb,67:76,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,67:77,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,67:78,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:79,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:80,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:81,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:82,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:83,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:84,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:85,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:86,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:87,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,24:$Vb,71:88,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vp,[2,67]),{26:[1,89],78:$Vl,79:$Vm,80:$Vn,81:$Vo},o($Vp,[2,74]),o($Vp,[2,75]),o($Vp,[2,76]),{20:$Vq,25:90,26:$Vr},{32:[1,92]},o($V7,$V8,{18:93,21:$V9}),o($Vk,[2,57]),o($Vk,[2,58]),o($Vk,[2,59]),o($Vs,[2,61],{78:$Vl,79:$Vm,80:$Vn,81:$Vo}),o($Vs,[2,62],{78:$Vl,79:$Vm,80:$Vn,81:$Vo}),o($Vs,[2,63],{78:$Vl,79:$Vm,80:$Vn,81:$Vo}),o($Vs,[2,64],{78:$Vl,79:$Vm,80:$Vn,81:$Vo}),o($Vs,[2,65],{78:$Vl,79:$Vm,80:$Vn,81:$Vo}),o($Vs,[2,66],{78:$Vl,79:$Vm,80:$Vn,81:$Vo}),o($Vt,[2,68],{80:$Vn,81:$Vo}),o($Vt,[2,69],{80:$Vn,81:$Vo}),o($Vp,[2,70]),o($Vp,[2,71]),o($Vp,[2,72]),{26:[1,94]},{17:95,31:$V2,37:$V3,38:$V4,39:$V5,40:$V6},{33:[1,96]},o($V7,[2,12]),{12:$Vu,27:97,35:99,36:[1,98]},{8:[1,101]},{34:[1,102]},{14:[2,16]},{14:[2,18]},{14:[2,19]},{8:$Vv,14:[1,104],16:113,17:17,31:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:114,42:103,43:105,44:106,45:107,46:108,47:109,48:$Vw,49:$Vx,50:$Vy,51:115,52:$Vz,57:$VA,59:$VB,60:$VC,61:$VD},{20:$Vq,25:122,26:$Vr},{26:[1,123]},{8:$Vv,14:[1,124],16:113,17:17,31:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:114,43:125,44:106,45:107,46:108,47:109,48:$Vw,49:$Vx,50:$Vy,51:115,52:$Vz,57:$VA,59:$VB,60:$VC,61:$VD},o($VE,[2,31]),o($VF,[2,33]),o($VF,[2,34]),o($VF,[2,35]),o($VF,[2,36]),o($VF,[2,37]),{36:[1,126]},{36:[1,127]},{8:$Va,22:128,24:$Vb,36:[1,129],65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{36:[1,130]},{36:[1,131]},{36:[1,132]},{24:[1,133]},{24:[1,134]},{12:$Vu,35:135},{24:[1,136]},{21:[1,137]},{53:[1,138]},{26:[2,27]},{12:$Vu,35:139},o($VE,[2,30]),o($VF,[2,32]),o($VF,[2,38]),o($VF,[2,39]),{36:[1,140]},o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),{17:141,31:$V2,37:$V3,38:$V4,39:$V5,40:$V6},{8:$Va,22:142,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{59:[1,143]},{8:$Va,22:144,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,22:145,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{54:[1,146]},{14:[2,17]},o($VF,[2,40]),{8:[1,147]},{26:[1,148]},{24:[1,149]},{26:[1,150]},{36:[2,29]},{53:[1,151]},{21:[1,152]},{12:$Vu,35:153},{8:$Va,22:154,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{12:$Vu,35:155},{55:[1,156],56:[1,157]},{8:$Va,22:158,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},o($VF,[2,48]),{26:[1,159]},o($VF,[2,52],{62:160,63:[1,161]}),{24:[1,162]},{24:[1,163]},{36:[1,164]},{36:[1,165]},o($VF,[2,50]),{12:$Vu,35:168,47:167,61:$VD,64:166},{8:$Va,22:169,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,22:170,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},{8:$Va,22:171,24:$Vb,65:37,66:$Vc,67:39,71:40,78:$Vd,82:43,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj},o($VF,[2,49]),o($VF,[2,51]),o($VF,[2,53]),o($VF,[2,54]),{26:[1,172]},{26:[1,173]},{36:[1,174]},{36:[2,45]},{36:[2,46]},{58:[1,175]},{26:[1,176]},{12:$Vu,35:177},o($VF,[2,47])],
defaultActions: {7:[2,5],8:[2,6],14:[2,9],15:[2,10],18:[2,22],19:[2,23],20:[2,24],21:[2,25],22:[2,26],26:[2,20],27:[2,21],97:[2,16],98:[2,18],99:[2,19],122:[2,27],139:[2,17],145:[2,29],172:[2,45],173:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//importaciones

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 37;
break;
case 4:return 38;
break;
case 5:return 31;
break;
case 6:return 39;
break;
case 7:return 40;
break;
case 8:return 59;
break;
case 9:return 61;
break;
case 10:return 60;
break;
case 11:return 63;
break;
case 12:return 10;
break;
case 13:return 11;
break;
case 14:return 29;
break;
case 15:return 55;
break;
case 16:return 56;
break;
case 17:return 90;
break;
case 18:return 91;
break;
case 19:return 57;
break;
case 20:return 6;
break;
case 21:return 28;
break;
case 22:return 50;
break;
case 23:return 'rbreak';
break;
case 24:return 'rcontinue';
break;
case 25:return 'main';
break;
case 26:return 89;  
break;
case 27:return 'entero';
break;
case 28:return 32;  
break;
case 29:return 33;  
break;
case 30:return 12;  
break;
case 31:return 14;  
break;
case 32:return 36; 
break;
case 33:return 84;  
break;
case 34:return 85;  
break;
case 35:return 79; 
break;
case 36:return 78;
break;
case 37:return 80;
break;
case 38:return 81
break;
case 39:return 24;  
break;
case 40:return 26;  
break;
case 41:return 72;  
break;
case 42:return 73;  
break;
case 43:return 76;  
break;
case 44:return 77; 
break;
case 45:return 21;  
break;
case 46:return 75;  
break;
case 47:return 74;  
break;
case 48:return 66;  
break;
case 49:return 70;  
break;
case 50:return 68;
break;
case 51:return 69;  
break;
case 52:return 53;  
break;
case 53:return 20;  
break;
case 54:return 8;
break;
case 55:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 'cadena';
break;
case 56:return 87;
break;
case 57:/*se ignoran*/ 
break;
case 58:return 'EOF';   
break;
case 59:document.getElementById("txtsalida1"+publico_id).value+='Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column +"\n";
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:system\.out\.print\b)/i,/^(?:system\.out\.println\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:main\b)/i,/^(?:[0-9]+(\.[0-9])?\b)/i,/^(?:[0-9]+\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:([A-Za-z])[A-Za-z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'.')/i,/^(?:[ \t\r\n\f]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}